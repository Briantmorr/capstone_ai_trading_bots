# .github/workflows/scheduled_bot_run.yml
name: Run Trading Bots Daily and Commit Log

on:
  schedule:
    # Runs daily at 8:00 AM Pacific Time (PDT/PST = UTC-7/UTC-8)
    # 8:00 AM PT = 15:00 UTC (during PDT, UTC-7)
    # Adjust if needed for standard time or use a different trigger
    - cron: '0 15 * * 1-5'
  workflow_dispatch: # Allows manual triggering

# Add permissions for the job to write contents (commit/push)
permissions:
  contents: write

jobs:
  run-bots-and-commit-log:
    runs-on: ubuntu-latest
    env:
      #   Explicitly mentioning bot name as secrets are hidden logs by githubactions
      BOT_NAME_1: "trading_bot_llm_sentiment_brian"
      BOT_API_KEY_1: ${{ secrets.BOT_API_KEY_1 }}
      BOT_API_SECRET_1: ${{ secrets.BOT_API_SECRET_1 }}

      BOT_NAME_2: "momentum_bot_carlo"
      BOT_API_KEY_2: ${{ secrets.BOT_API_KEY_2 }}
      BOT_API_SECRET_2: ${{ secrets.BOT_API_SECRET_2 }}

      # enable after successful test of other bots
      BOT_NAME_3: 'trading_bot_macd_melissa'
      BOT_API_KEY_3: ${{ secrets.BOT_API_KEY_3 }}
      BOT_API_SECRET_3: ${{ secrets.BOT_API_SECRET_3 }}

      BOT_NAME_4: 'momentum_ml_carlo'
      BOT_API_KEY_4: ${{ secrets.BOT_API_KEY_4 }}
      BOT_API_SECRET_4: ${{ secrets.BOT_API_SECRET_4 }}

      FINNHUB_API_KEY: ${{secrets.FINNHUB_API_KEY}}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
    - name: Check out repository code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' # Specify your Python version

    - name: Install Pipenv and Dependencies
      run: |
        python -m pip install --upgrade pip pipenv
        # Use sync which installs based on Pipfile.lock (faster for CI if lock file is up-to-date)
        # Installs into the system python managed by setup-python action
        pipenv sync --system --dev # Use --dev if you need development dependencies too

    - name: Run Bot Manager
      run: python bot_manager.py --run-all

    - name: Display Log File Content
      # Run this step even if the bot manager script failed, to capture error logs
      if: always()
      run: |
        echo "--- Start of bot_manager.log ---"
        # Use cat to output the log file content to the Actions console
        # Use || true to prevent workflow failure if the log file doesn't exist
        cat bot_manager.log || true
        tail -c 1000 bot_manager.log || true
        echo "--- End of bot_manager.log ---"

    - name: Configure Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Commit and Push Log File
      run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          git add .
          if ! git diff --staged --quiet; then
            echo "Changes detected in bot_manager.log. Committing..."
            git commit -m "Update bot execution log [skip ci]" -m "Workflow Run ID: ${{ github.run_id }}"
            echo "Pulling latest changes from bot-execution branch..."
            if git pull --rebase origin bot-execution; then
                echo "Rebase conflict detected. Resolving by keeping local versions of *.log files..."

                 # Loop through conflicted .log files and resolve by keeping "ours"
                for file in $(git diff --name-only --diff-filter=U | grep '\.log$'); do
                    echo "Resolving conflict in $file by keeping local version..."
                    git checkout --ours "$file"
                    git add "$file"
                done

                git rebase --continue
            fi

            echo "Pushing updated log(s) to bot-execution branch..."
            git push origin HEAD:refs/heads/bot-execution
            echo "Push successful."
          else
            echo "No changes detected in bot_manager.log. Nothing to commit."
          fi
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update Trading Leaderboard
      # This step updates the leaderboard with the bot's performance. Calling for one updates all
      if: always()
      run: |
          curl -X POST "https://trading-leaderboard-three.vercel.app/api/update-leaderboard" \
            -H "Content-Type: application/json" \
            -d "{\"bot_name\": \"${BOT_NAME_1}\", \"alpaca_account_id\": \"${BOT_API_KEY_1}\"}"